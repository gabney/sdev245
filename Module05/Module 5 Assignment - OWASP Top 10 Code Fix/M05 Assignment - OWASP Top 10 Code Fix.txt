"""
Module 5: Assignment - OWASP Top 10 Code Fix
SDEV 245
Gabriel Abney

This file includes my code from the Module 05 assignment \
including the original vulnerable code in comments and my \
proposed corrected code below.  The README file in the \
GitHub folder containing this file includes the problem \
that I identified for each code snippet as well as how my \
proposed solution corrects those problems.

This is a .txt file becaused multiple programming languages are \
included in the code snippets.
"""



"""
1. Broken Access Control

app.get('/profile/:userId', (req, res) => {
    User.findById(req.params.userId, (err, user) => {
        if (err) return res.status(500).send(err);
        res.json(user);
    });
});
"""

# 1. My proposed solution:

app.get('/profile/:userId', (req, res) => {
    User.findById(req.params.userId, (err, user) => {
        if (err) return res.status(500).send(err);
        else res.json(user);  # moved into else statement instead of always passing the user .json data back 
    });
});




"""
2. Broken Access Control

@app.route('/account/<user_id>')
def get_account(user_id):
    user = db.query(User).filter_by(id=user_id).first()
    return jsonify(user.to_dict())
"""

# 2. My Proposed solution:

@app.route('/account/<user_id>')
def check_permissions(user_id, account_token) # gets the token about who is logged in for the request
    if user_id == account_token:
        return True # logged in account is same as requested user id
    else:
        return False # different account login from requested user id
def get_account(user_id):
    if check_permission() == True:
        user = db.query(User).filter_by(id=user_id).first()
        return jsonify(user.to_dict())
    else return error_message_permissions




"""
3. Cryptographic Failures

public String hashPassword(String password) throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance("MD5");
    md.update(password.getBytes());
    byte[] digest = md.digest();
    return DatatypeConverter.printHexBinary(digest);
}
"""

# 3. My proposed solution
public String hashPassword(String password) throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance("AES"); # uses AES encryption algorithm
    md.update(password.getBytes());
    byte[] digest = md.digest();
    return digest; # returns byte array without conversion




"""
4. Cryptographic Failures

import hashlib

def hash_password(password):
    return hashlib.sha1(password.encode()).hexdigest()
"""

# 4. My proposed solution

import hashlib

def hash_password(password):
    return hashlib.AES(password.encode()).hexdigest() # using AES encryption




"""
5. Injection

String username = request.getParameter("username");
String query = "SELECT * FROM users WHERE username = '" + username + "'";
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery(query);
"""

# 5. My proposed solution

String username = request.getParameter("username");
String safeParams = "SELECT * FROM users WHERE username ="
safeQuery = statementPreparer.create(safeParams, username) # creates a prepared statement to compile before executing, preparing to only accept one unknown parameter
PreparedStatement stmt = connection.createPreparedStatement();
ResultSet rs = stmt.executeQuery(safeQuery);




"""
6. Injection

app.get('/user', (req, res) => {
    // Directly trusting query parameters can lead to NoSQL injection
    db.collection('users').findOne({ username: req.query.username }, (err, user) => {
        if (err) throw err;
        res.json(user);
    });
});
"""

# 6. My proposed solution

app.get('/user', (req, res) => {
    // Directly trusting query parameters can lead to NoSQL injection
    let reqCleaned = sanitizeInputs(req) # sanitizes the user input before using it in database
    let resCleaned = sanitizeInputs(res) # sanitizes the user input before using it in database
    db.collection('users').findOne({ username: reqCleaned.query.username }, (err, user) => {
        if (err) throw err;
        res.json(user);
    });
});




"""
7. Insecure Design

@app.route('/reset-password', methods=['POST'])
def reset_password():
    email = request.form['email']
    new_password = request.form['new_password']
    user = User.query.filter_by(email=email).first()
    user.password = new_password
    db.session.commit()
    return 'Password reset'
"""

# 7. My proposed solution

@app.route('/reset-password', methods=['POST'])

def confirmation_email(email): # new function to send reset email to address
    conf_address = email
    confirmation.send(conf_address)
def reset_password():
    email = request.form['email']
    user = User.query.filter_by(email=email).first()
    confirmation_email(email) # passes email input to reset function
    return 'Password reset instructions sent to email address'




"""
8.Software and Data Integrity Failures

<script src="https://cdn.example.com/lib.js"></script>
"""

# 8. My proposed solution

<script src="../scripts/lib.js"></script>



"""
9.Server-Side Request Forgery

url = input("Enter URL: ")
response = requests.get(url)
print(response.text)
"""

# 9. My proposed solution

url = input("Enter URL: ")
def whitelist_checker(url):
    url = noredirect(url) # prevents redirects and sanitizes input
    if url in whitelists:   #checks if final url is in whitelist of acceptable urls
        return = requests.get(url)
    else:
        return "unauthorized website"
response = whitelist_checker(url)
print(response.text)



"""
10. Identification and Authentication Failures

if (inputPassword.equals(user.getPassword())) { 
    // Login success
}


# 10. My proposed solution
 
inputHash = inputPassword.hash()
login_acceptable = login_attempts.check() # checks to see if too many logins recently
if (inputHash.equals(user.getPasswordHash())) and login_acceptable = True {
    // Login success
}
else:
    print("Login failed.")
login_attempts.record() # records this login attempt 
